{"ast":null,"code":"var _jsxFileName = \"/home/ze/Projects/voice_profficiency/frontend/src/components/DropZone.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DropZone = () => {\n  _s();\n  const onDrop = useCallback(acceptedFiles => {\n    acceptedFiles.forEach(file => {\n      const reader = new FileReader();\n      reader.onabort = () => console.log(\"file reading was aborted\");\n      reader.onerror = () => console.log(\"file reading has failed\");\n      reader.onload = () => {\n        // Do whatever you want with the file contents\n        const binaryStr = reader.result;\n        console.log(binaryStr);\n      };\n      reader.readAsArrayBuffer(file);\n    });\n  }, []);\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop,\n    maxFiles: 1\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ...getRootProps(),\n    className: \"dropzone\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ...getInputProps()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Drag 'n' drop some files here, or click to select files\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 3\n  }, this);\n};\n_s(DropZone, \"m2/zPeD393EJy9nRT3zys7UD7jw=\", false, function () {\n  return [useDropzone];\n});\n_c = DropZone;\nexport default DropZone;\nvar _c;\n$RefreshReg$(_c, \"DropZone\");","map":{"version":3,"names":["React","useCallback","useDropzone","DropZone","onDrop","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onload","binaryStr","result","readAsArrayBuffer","getRootProps","getInputProps","maxFiles"],"sources":["/home/ze/Projects/voice_profficiency/frontend/src/components/DropZone.js"],"sourcesContent":["import React, { useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\n\nconst DropZone = () => {\n\tconst onDrop = useCallback((acceptedFiles) => {\n\t\tacceptedFiles.forEach((file) => {\n\t\t\tconst reader = new FileReader();\n\n\t\t\treader.onabort = () => console.log(\"file reading was aborted\");\n\t\t\treader.onerror = () => console.log(\"file reading has failed\");\n\t\t\treader.onload = () => {\n\t\t\t\t// Do whatever you want with the file contents\n\t\t\t\tconst binaryStr = reader.result;\n\t\t\t\tconsole.log(binaryStr);\n\t\t\t};\n\t\t\treader.readAsArrayBuffer(file);\n\t\t});\n\t}, []);\n\tconst { getRootProps, getInputProps } = useDropzone({\n\t\tonDrop,\n\t\tmaxFiles: 1,\n\t});\n\n\treturn (\n\t\t<div {...getRootProps()} className=\"dropzone\">\n\t\t\t<input {...getInputProps()} />\n\t\t\t<p>Drag 'n' drop some files here, or click to select files</p>\n\t\t</div>\n\t);\n};\nexport default DropZone;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,WAAW,QAAQ,OAAO;AAC1C,SAASC,WAAW,QAAQ,gBAAgB;AAAC;AAE7C,MAAMC,QAAQ,GAAG,MAAM;EAAA;EACtB,MAAMC,MAAM,GAAGH,WAAW,CAAEI,aAAa,IAAK;IAC7CA,aAAa,CAACC,OAAO,CAAEC,IAAI,IAAK;MAC/B,MAAMC,MAAM,GAAG,IAAIC,UAAU,EAAE;MAE/BD,MAAM,CAACE,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MAC9DJ,MAAM,CAACK,OAAO,GAAG,MAAMF,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MAC7DJ,MAAM,CAACM,MAAM,GAAG,MAAM;QACrB;QACA,MAAMC,SAAS,GAAGP,MAAM,CAACQ,MAAM;QAC/BL,OAAO,CAACC,GAAG,CAACG,SAAS,CAAC;MACvB,CAAC;MACDP,MAAM,CAACS,iBAAiB,CAACV,IAAI,CAAC;IAC/B,CAAC,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EACN,MAAM;IAAEW,YAAY;IAAEC;EAAc,CAAC,GAAGjB,WAAW,CAAC;IACnDE,MAAM;IACNgB,QAAQ,EAAE;EACX,CAAC,CAAC;EAEF,oBACC;IAAA,GAASF,YAAY,EAAE;IAAE,SAAS,EAAC,UAAU;IAAA,wBAC5C;MAAA,GAAWC,aAAa;IAAE;MAAA;MAAA;MAAA;IAAA,QAAI,eAC9B;MAAA,UAAG;IAAuD;MAAA;MAAA;MAAA;IAAA,QAAI;EAAA;IAAA;IAAA;IAAA;EAAA,QACzD;AAER,CAAC;AAAC,GA1BIhB,QAAQ;EAAA,QAe2BD,WAAW;AAAA;AAAA,KAf9CC,QAAQ;AA2Bd,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}