{"ast":null,"code":"var _jsxFileName = \"/home/ze/Projects/voice_profficiency/frontend/src/components/AudioPlayer.js\",\n  _s = $RefreshSig$();\nimport React, { forwardRef, useEffect, useImperativeHandle, useRef, useState } from \"react\";\nimport sample from \"../audio/Sample.mp3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AudioPlayer = /*#__PURE__*/_s( /*#__PURE__*/forwardRef(_c = _s((props, ref) => {\n  _s();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [duration, setDuration] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const audioPlayer = useRef(null);\n  useEffect(() => {\n    audioPlayer.current.addEventListener(\"timeupdate\", updateCurrentTime);\n  }, []);\n  useImperativeHandle(ref, () => audioPlayer);\n  const handlePlayClick = () => {\n    setIsPlaying(!isPlaying);\n    isPlaying ? audioPlayer.current.pause() : audioPlayer.current.play();\n  };\n  const onLoadedMetadata = () => {\n    const seconds = Math.floor(audioPlayer.current.duration);\n    setDuration(seconds);\n  };\n  const updateCurrentTime = event => {\n    setCurrentTime(event.currentTarget.currentTime);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"audioPlayer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioPlayer\n      // onTimeUpdate={updateCurrentTime}\n      ,\n      src: sample,\n      type: \"audio/mpeg\"\n      //Wait for metadata before setting duration\n      ,\n      preload: \"metadata\",\n      onLoadedMetadata: onLoadedMetadata,\n      children: \"cannot play\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePlayClick,\n        children: isPlaying ? \"pause\" : \"play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: currentTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: duration\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n}, \"9mHbHnrJ374KxPyirjK4zw9+cl8=\")), \"9mHbHnrJ374KxPyirjK4zw9+cl8=\");\n_c2 = AudioPlayer;\nexport default AudioPlayer;\nvar _c, _c2;\n$RefreshReg$(_c, \"AudioPlayer$forwardRef\");\n$RefreshReg$(_c2, \"AudioPlayer\");","map":{"version":3,"names":["React","forwardRef","useEffect","useImperativeHandle","useRef","useState","sample","AudioPlayer","props","ref","isPlaying","setIsPlaying","duration","setDuration","currentTime","setCurrentTime","audioPlayer","current","addEventListener","updateCurrentTime","handlePlayClick","pause","play","onLoadedMetadata","seconds","Math","floor","event","currentTarget"],"sources":["/home/ze/Projects/voice_profficiency/frontend/src/components/AudioPlayer.js"],"sourcesContent":["import React, {\n\tforwardRef,\n\tuseEffect,\n\tuseImperativeHandle,\n\tuseRef,\n\tuseState,\n} from \"react\";\nimport sample from \"../audio/Sample.mp3\";\n\nconst AudioPlayer = forwardRef((props, ref) => {\n\tconst [isPlaying, setIsPlaying] = useState(false);\n\tconst [duration, setDuration] = useState(0);\n\tconst [currentTime, setCurrentTime] = useState(0);\n\tconst audioPlayer = useRef(null);\n\n\tuseEffect(() => {\n\t\taudioPlayer.current.addEventListener(\"timeupdate\", updateCurrentTime);\n\t}, []);\n\n\tuseImperativeHandle(ref, () => audioPlayer);\n\tconst handlePlayClick = () => {\n\t\tsetIsPlaying(!isPlaying);\n\t\tisPlaying ? audioPlayer.current.pause() : audioPlayer.current.play();\n\t};\n\n\tconst onLoadedMetadata = () => {\n\t\tconst seconds = Math.floor(audioPlayer.current.duration);\n\t\tsetDuration(seconds);\n\t};\n\n\tconst updateCurrentTime = (event) => {\n\t\tsetCurrentTime(event.currentTarget.currentTime);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<div>audioPlayer</div>\n\t\t\t<audio\n\t\t\t\tref={audioPlayer}\n\t\t\t\t// onTimeUpdate={updateCurrentTime}\n\t\t\t\tsrc={sample}\n\t\t\t\ttype=\"audio/mpeg\"\n\t\t\t\t//Wait for metadata before setting duration\n\t\t\t\tpreload=\"metadata\"\n\t\t\t\tonLoadedMetadata={onLoadedMetadata}\n\t\t\t>\n\t\t\t\tcannot play\n\t\t\t</audio>\n\n\t\t\t<div>\n\t\t\t\t<button onClick={handlePlayClick}>\n\t\t\t\t\t{isPlaying ? \"pause\" : \"play\"}\n\t\t\t\t</button>\n\t\t\t\t<p>{currentTime}</p>\n\t\t\t\t<input type=\"range\"></input>\n\t\t\t\t<p>{duration}</p>\n\t\t\t</div>\n\t\t</>\n\t);\n});\n\nexport default AudioPlayer;\n"],"mappings":";;AAAA,OAAOA,KAAK,IACXC,UAAU,EACVC,SAAS,EACTC,mBAAmB,EACnBC,MAAM,EACNC,QAAQ,QACF,OAAO;AACd,OAAOC,MAAM,MAAM,qBAAqB;AAAC;AAAA;AAEzC,MAAMC,WAAW,iCAAGN,UAAU,SAAC,CAACO,KAAK,EAAEC,GAAG,KAAK;EAAA;EAC9C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAMW,WAAW,GAAGZ,MAAM,CAAC,IAAI,CAAC;EAEhCF,SAAS,CAAC,MAAM;IACfc,WAAW,CAACC,OAAO,CAACC,gBAAgB,CAAC,YAAY,EAAEC,iBAAiB,CAAC;EACtE,CAAC,EAAE,EAAE,CAAC;EAENhB,mBAAmB,CAACM,GAAG,EAAE,MAAMO,WAAW,CAAC;EAC3C,MAAMI,eAAe,GAAG,MAAM;IAC7BT,YAAY,CAAC,CAACD,SAAS,CAAC;IACxBA,SAAS,GAAGM,WAAW,CAACC,OAAO,CAACI,KAAK,EAAE,GAAGL,WAAW,CAACC,OAAO,CAACK,IAAI,EAAE;EACrE,CAAC;EAED,MAAMC,gBAAgB,GAAG,MAAM;IAC9B,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACV,WAAW,CAACC,OAAO,CAACL,QAAQ,CAAC;IACxDC,WAAW,CAACW,OAAO,CAAC;EACrB,CAAC;EAED,MAAML,iBAAiB,GAAIQ,KAAK,IAAK;IACpCZ,cAAc,CAACY,KAAK,CAACC,aAAa,CAACd,WAAW,CAAC;EAChD,CAAC;EAED,oBACC;IAAA,wBACC;MAAA,UAAK;IAAW;MAAA;MAAA;MAAA;IAAA,QAAM,eACtB;MACC,GAAG,EAAEE;MACL;MAAA;MACA,GAAG,EAAEV,MAAO;MACZ,IAAI,EAAC;MACL;MAAA;MACA,OAAO,EAAC,UAAU;MAClB,gBAAgB,EAAEiB,gBAAiB;MAAA,UACnC;IAED;MAAA;MAAA;MAAA;IAAA,QAAQ,eAER;MAAA,wBACC;QAAQ,OAAO,EAAEH,eAAgB;QAAA,UAC/BV,SAAS,GAAG,OAAO,GAAG;MAAM;QAAA;QAAA;QAAA;MAAA,QACrB,eACT;QAAA,UAAII;MAAW;QAAA;QAAA;QAAA;MAAA,QAAK,eACpB;QAAO,IAAI,EAAC;MAAO;QAAA;QAAA;QAAA;MAAA,QAAS,eAC5B;QAAA,UAAIF;MAAQ;QAAA;QAAA;QAAA;MAAA,QAAK;IAAA;MAAA;MAAA;MAAA;IAAA,QACZ;EAAA,gBACJ;AAEL,CAAC,kCAAC;AAAC,MAlDGL,WAAW;AAoDjB,eAAeA,WAAW;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}