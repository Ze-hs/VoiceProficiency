{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport transcriptService from \"../services/transcript\";\nimport util from \"../utils/helper\";\nconst transcriptSlice = createSlice({\n  name: \"transcript\",\n  initialState: {\n    all: [],\n    currentName: null,\n    transcript: null\n  },\n  reducers: {\n    setTranscriptst(state, action) {\n      return {\n        ...state,\n        all: action.payload\n      };\n    },\n    setCurrentName(state, action) {\n      return {\n        ...state,\n        current: action.payload\n      };\n    },\n    setCurrentTranscript(state, action) {\n      return {\n        ...state,\n        transcript: action.payload\n      };\n    }\n  }\n});\nexport const {\n  setTranscriptst,\n  setCurrentName,\n  setCurrentTranscript\n} = transcriptSlice.actions;\nexport const getTranscriptList = () => {\n  return async dispatch => {\n    const audioList = await transcriptService.getAll();\n    dispatch(setTranscriptst(audioList));\n  };\n};\nexport const setTranscriptName = transcriptName => {\n  return async (dispatch, getState) => {\n    if (!transcriptName) {\n      return null;\n    }\n    const basename = util.formatFileName(transcriptName);\n    const transcriptIndex = getState().transcriptList.all.findIndex(name => name.includes(basename));\n    if (transcriptIndex !== -1) {\n      const transcript = getState().transcriptList.all[transcriptIndex];\n      dispatch(setCurrentName(transcript));\n    }\n  };\n};\nexport const getcurrentTranscript = () => {\n  return async (dispatch, getState) => {\n    const transcriptName = getState().transcriptList.currentName;\n    if (!transcriptName) {\n      console.log(\"No transcript\");\n      return null;\n    }\n    let transcript = await transcriptService.getTranscript(transcriptName);\n    transcript = util.formatTranscript(transcript.segments);\n    dispatch(setCurrentTranscript(transcript));\n  };\n};\nexport default transcriptSlice.reducer;","map":{"version":3,"names":["createSlice","transcriptService","util","transcriptSlice","name","initialState","all","currentName","transcript","reducers","setTranscriptst","state","action","payload","setCurrentName","current","setCurrentTranscript","actions","getTranscriptList","dispatch","audioList","getAll","setTranscriptName","transcriptName","getState","basename","formatFileName","transcriptIndex","transcriptList","findIndex","includes","getcurrentTranscript","console","log","getTranscript","formatTranscript","segments","reducer"],"sources":["/home/ze/Projects/voice_profficiency/frontend/src/reducers/transcriptReducer.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport transcriptService from \"../services/transcript\";\nimport util from \"../utils/helper\";\nconst transcriptSlice = createSlice({\n\tname: \"transcript\",\n\tinitialState: {\n\t\tall: [],\n\t\tcurrentName: null,\n\t\ttranscript: null,\n\t},\n\treducers: {\n\t\tsetTranscriptst(state, action) {\n\t\t\treturn { ...state, all: action.payload };\n\t\t},\n\n\t\tsetCurrentName(state, action) {\n\t\t\treturn { ...state, current: action.payload };\n\t\t},\n\n\t\tsetCurrentTranscript(state, action) {\n\t\t\treturn { ...state, transcript: action.payload };\n\t\t},\n\t},\n});\n\nexport const { setTranscriptst, setCurrentName, setCurrentTranscript } =\n\ttranscriptSlice.actions;\n\nexport const getTranscriptList = () => {\n\treturn async (dispatch) => {\n\t\tconst audioList = await transcriptService.getAll();\n\t\tdispatch(setTranscriptst(audioList));\n\t};\n};\n\nexport const setTranscriptName = (transcriptName) => {\n\treturn async (dispatch, getState) => {\n\t\tif (!transcriptName) {\n\t\t\treturn null;\n\t\t}\n\t\tconst basename = util.formatFileName(transcriptName);\n\t\tconst transcriptIndex = getState().transcriptList.all.findIndex(\n\t\t\t(name) => name.includes(basename)\n\t\t);\n\n\t\tif (transcriptIndex !== -1) {\n\t\t\tconst transcript = getState().transcriptList.all[transcriptIndex];\n\t\t\tdispatch(setCurrentName(transcript));\n\t\t}\n\t};\n};\n\nexport const getcurrentTranscript = () => {\n\treturn async (dispatch, getState) => {\n\t\tconst transcriptName = getState().transcriptList.currentName;\n\t\tif (!transcriptName) {\n\t\t\tconsole.log(\"No transcript\");\n\t\t\treturn null;\n\t\t}\n\n\t\tlet transcript = await transcriptService.getTranscript(transcriptName);\n\t\ttranscript = util.formatTranscript(transcript.segments);\n\n\t\tdispatch(setCurrentTranscript(transcript));\n\t};\n};\n\nexport default transcriptSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,iBAAiB,MAAM,wBAAwB;AACtD,OAAOC,IAAI,MAAM,iBAAiB;AAClC,MAAMC,eAAe,GAAGH,WAAW,CAAC;EACnCI,IAAI,EAAE,YAAY;EAClBC,YAAY,EAAE;IACbC,GAAG,EAAE,EAAE;IACPC,WAAW,EAAE,IAAI;IACjBC,UAAU,EAAE;EACb,CAAC;EACDC,QAAQ,EAAE;IACTC,eAAe,CAACC,KAAK,EAAEC,MAAM,EAAE;MAC9B,OAAO;QAAE,GAAGD,KAAK;QAAEL,GAAG,EAAEM,MAAM,CAACC;MAAQ,CAAC;IACzC,CAAC;IAEDC,cAAc,CAACH,KAAK,EAAEC,MAAM,EAAE;MAC7B,OAAO;QAAE,GAAGD,KAAK;QAAEI,OAAO,EAAEH,MAAM,CAACC;MAAQ,CAAC;IAC7C,CAAC;IAEDG,oBAAoB,CAACL,KAAK,EAAEC,MAAM,EAAE;MACnC,OAAO;QAAE,GAAGD,KAAK;QAAEH,UAAU,EAAEI,MAAM,CAACC;MAAQ,CAAC;IAChD;EACD;AACD,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEH,eAAe;EAAEI,cAAc;EAAEE;AAAqB,CAAC,GACrEb,eAAe,CAACc,OAAO;AAExB,OAAO,MAAMC,iBAAiB,GAAG,MAAM;EACtC,OAAO,MAAOC,QAAQ,IAAK;IAC1B,MAAMC,SAAS,GAAG,MAAMnB,iBAAiB,CAACoB,MAAM,EAAE;IAClDF,QAAQ,CAACT,eAAe,CAACU,SAAS,CAAC,CAAC;EACrC,CAAC;AACF,CAAC;AAED,OAAO,MAAME,iBAAiB,GAAIC,cAAc,IAAK;EACpD,OAAO,OAAOJ,QAAQ,EAAEK,QAAQ,KAAK;IACpC,IAAI,CAACD,cAAc,EAAE;MACpB,OAAO,IAAI;IACZ;IACA,MAAME,QAAQ,GAAGvB,IAAI,CAACwB,cAAc,CAACH,cAAc,CAAC;IACpD,MAAMI,eAAe,GAAGH,QAAQ,EAAE,CAACI,cAAc,CAACtB,GAAG,CAACuB,SAAS,CAC7DzB,IAAI,IAAKA,IAAI,CAAC0B,QAAQ,CAACL,QAAQ,CAAC,CACjC;IAED,IAAIE,eAAe,KAAK,CAAC,CAAC,EAAE;MAC3B,MAAMnB,UAAU,GAAGgB,QAAQ,EAAE,CAACI,cAAc,CAACtB,GAAG,CAACqB,eAAe,CAAC;MACjER,QAAQ,CAACL,cAAc,CAACN,UAAU,CAAC,CAAC;IACrC;EACD,CAAC;AACF,CAAC;AAED,OAAO,MAAMuB,oBAAoB,GAAG,MAAM;EACzC,OAAO,OAAOZ,QAAQ,EAAEK,QAAQ,KAAK;IACpC,MAAMD,cAAc,GAAGC,QAAQ,EAAE,CAACI,cAAc,CAACrB,WAAW;IAC5D,IAAI,CAACgB,cAAc,EAAE;MACpBS,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAC5B,OAAO,IAAI;IACZ;IAEA,IAAIzB,UAAU,GAAG,MAAMP,iBAAiB,CAACiC,aAAa,CAACX,cAAc,CAAC;IACtEf,UAAU,GAAGN,IAAI,CAACiC,gBAAgB,CAAC3B,UAAU,CAAC4B,QAAQ,CAAC;IAEvDjB,QAAQ,CAACH,oBAAoB,CAACR,UAAU,CAAC,CAAC;EAC3C,CAAC;AACF,CAAC;AAED,eAAeL,eAAe,CAACkC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}