{"ast":null,"code":"var _jsxFileName = \"/home/ze/Projects/voice_profficiency/frontend/src/components/Transcript.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport transcriptData from \"../audio/Sample.json\";\nimport utils from \"../utils/helper\";\n//Testing purposes delete late\nimport data from \"../audio/Sample.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Transcript = _ref => {\n  _s();\n  let {\n    audioPlayerRef\n  } = _ref;\n  // console.log(data);\n  // console.log(\"hi\");\n\n  // console.log(JSON.parse(segments));\n\n  // data.segments.map((wordsArr) =>\n  // \twordsArr.words.map((words) => console.log(words.word))\n  // );\n\n  const [transcript, setTranscript] = useState([]);\n  useEffect(() => {\n    setTranscript(utils.formatTranscript(transcriptData.segments));\n    console.log(\"helllo fist \");\n  }, []);\n  useEffect(() => {\n    console.log(transcript);\n    const ontimeupdate = () => {\n      const activeWordIndex = transcript.findIndex(word => {\n        console.log(\"inside\");\n        console.log(\"==========\");\n        return word.start > audioPlayerRef.current.currentTime;\n      });\n      console.log(activeWordIndex);\n      // console.log(audioPlayerRef);\n      console.log(\"is this workikng\");\n      // activeWordIndex;\n    };\n\n    if (audioPlayerRef && audioPlayerRef.current) {\n      audioPlayerRef.current.addEventListener(\"timeupdate\", ontimeupdate);\n    }\n  }, [audioPlayerRef]);\n  const getConfidenceStyle = confidence => {\n    // return confidence;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: data.segments.map(wordsArr => wordsArr.words.map(words => /*#__PURE__*/_jsxDEV(\"span\", {\n      className: getConfidenceStyle(words.probability),\n      children: words.word\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 6\n    }, this)))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 3\n  }, this);\n};\n_s(Transcript, \"OyjOvLpBMycJd+Fn1z6n8zw76Qw=\");\n_c = Transcript;\nexport default Transcript;\nvar _c;\n$RefreshReg$(_c, \"Transcript\");","map":{"version":3,"names":["React","useEffect","useState","transcriptData","utils","data","Transcript","audioPlayerRef","transcript","setTranscript","formatTranscript","segments","console","log","ontimeupdate","activeWordIndex","findIndex","word","start","current","currentTime","addEventListener","getConfidenceStyle","confidence","map","wordsArr","words","probability"],"sources":["/home/ze/Projects/voice_profficiency/frontend/src/components/Transcript.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport transcriptData from \"../audio/Sample.json\";\nimport utils from \"../utils/helper\";\n//Testing purposes delete late\nimport data from \"../audio/Sample.json\";\n\nconst Transcript = ({ audioPlayerRef }) => {\n\t// console.log(data);\n\t// console.log(\"hi\");\n\n\t// console.log(JSON.parse(segments));\n\n\t// data.segments.map((wordsArr) =>\n\t// \twordsArr.words.map((words) => console.log(words.word))\n\t// );\n\n\tconst [transcript, setTranscript] = useState([]);\n\n\tuseEffect(() => {\n\t\tsetTranscript(utils.formatTranscript(transcriptData.segments));\n\t\tconsole.log(\"helllo fist \");\n\t}, []);\n\n\tuseEffect(() => {\n\t\tconsole.log(transcript);\n\n\t\tconst ontimeupdate = () => {\n\t\t\tconst activeWordIndex = transcript.findIndex((word) => {\n\t\t\t\tconsole.log(\"inside\");\n\t\t\t\tconsole.log(\"==========\");\n\n\t\t\t\treturn word.start > audioPlayerRef.current.currentTime;\n\t\t\t});\n\t\t\tconsole.log(activeWordIndex);\n\t\t\t// console.log(audioPlayerRef);\n\t\t\tconsole.log(\"is this workikng\");\n\t\t\t// activeWordIndex;\n\t\t};\n\t\tif (audioPlayerRef && audioPlayerRef.current) {\n\t\t\taudioPlayerRef.current.addEventListener(\"timeupdate\", ontimeupdate);\n\t\t}\n\t}, [audioPlayerRef]);\n\n\tconst getConfidenceStyle = (confidence) => {\n\t\t// return confidence;\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t{data.segments.map((wordsArr) =>\n\t\t\t\twordsArr.words.map((words) => (\n\t\t\t\t\t<span className={getConfidenceStyle(words.probability)}>\n\t\t\t\t\t\t{words.word}\n\t\t\t\t\t</span>\n\t\t\t\t))\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default Transcript;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,cAAc,MAAM,sBAAsB;AACjD,OAAOC,KAAK,MAAM,iBAAiB;AACnC;AACA,OAAOC,IAAI,MAAM,sBAAsB;AAAC;AAExC,MAAMC,UAAU,GAAG,QAAwB;EAAA;EAAA,IAAvB;IAAEC;EAAe,CAAC;EACrC;EACA;;EAEA;;EAEA;EACA;EACA;;EAEA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACfQ,aAAa,CAACL,KAAK,CAACM,gBAAgB,CAACP,cAAc,CAACQ,QAAQ,CAAC,CAAC;IAC9DC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;EAC5B,CAAC,EAAE,EAAE,CAAC;EAENZ,SAAS,CAAC,MAAM;IACfW,OAAO,CAACC,GAAG,CAACL,UAAU,CAAC;IAEvB,MAAMM,YAAY,GAAG,MAAM;MAC1B,MAAMC,eAAe,GAAGP,UAAU,CAACQ,SAAS,CAAEC,IAAI,IAAK;QACtDL,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;QACrBD,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;QAEzB,OAAOI,IAAI,CAACC,KAAK,GAAGX,cAAc,CAACY,OAAO,CAACC,WAAW;MACvD,CAAC,CAAC;MACFR,OAAO,CAACC,GAAG,CAACE,eAAe,CAAC;MAC5B;MACAH,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;MAC/B;IACD,CAAC;;IACD,IAAIN,cAAc,IAAIA,cAAc,CAACY,OAAO,EAAE;MAC7CZ,cAAc,CAACY,OAAO,CAACE,gBAAgB,CAAC,YAAY,EAAEP,YAAY,CAAC;IACpE;EACD,CAAC,EAAE,CAACP,cAAc,CAAC,CAAC;EAEpB,MAAMe,kBAAkB,GAAIC,UAAU,IAAK;IAC1C;EAAA,CACA;EAED,oBACC;IAAA,UACElB,IAAI,CAACM,QAAQ,CAACa,GAAG,CAAEC,QAAQ,IAC3BA,QAAQ,CAACC,KAAK,CAACF,GAAG,CAAEE,KAAK,iBACxB;MAAM,SAAS,EAAEJ,kBAAkB,CAACI,KAAK,CAACC,WAAW,CAAE;MAAA,UACrDD,KAAK,CAACT;IAAI;MAAA;MAAA;MAAA;IAAA,QAEZ,CAAC;EACF;IAAA;IAAA;IAAA;EAAA,QACI;AAER,CAAC;AAAC,GApDIX,UAAU;AAAA,KAAVA,UAAU;AAsDhB,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}